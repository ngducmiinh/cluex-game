import React, { useState, useEffect, useRef } from 'react';
import './ChatView.css';

interface Message {
  id: number;
  sender: string;
  text: string;
  time: string;
  isMe: boolean;
  type?: 'missed_call' | 'call_back';
}

interface ChatViewProps {
  chatId: string;
  onBack: () => void;
}

const ChatView: React.FC<ChatViewProps> = ({ chatId, onBack }) => {
  const [callState, setCallState] = useState<'none' | 'calling' | 'busy'>('none');

  const handleCallClick = () => {
    setCallState('calling');
    // After 3 seconds of "calling", show busy state
    setTimeout(() => {
      setCallState('busy');
      // After 2 more seconds, close the call screen
      setTimeout(() => {
        setCallState('none');
      }, 2000);
    }, 3000);
  };
  const getChatData = (chatId: string) => {
    if (chatId === 'tuong-vy') {
      return {
        name: 'T∆∞·ªùng Vy',
        avatar: 'TV',
        messages: [
          {
            id: 1,
            sender: 'T∆∞·ªùng Vy',
            text: 'T∆∞·ªùng Vy tao v·ª´a xem danh s√°ch c√¥ng b·ªë gi·∫£i th∆∞·ªüng. T·∫°i sao l·∫°i tao kh√¥ng c√≥ trong danh s√°ch gi·∫£i cu·ªôc thi m√† c·∫£ team l·∫°i y√™u c·∫ßu m√¨nh ngu·ªùi kh√°c?',
            time: '22:39',
            isMe: false
          },
          {
            id: 2,
            sender: 'Me',
            text: 'H·∫£? G√¨ c∆°? M ƒëang n√≥i g√¨ th·∫ø?',
            time: '22:40',
            isMe: true
          },
          {
            id: 3,
            sender: 'T∆∞·ªùng Vy',
            text: 'M ƒë√∫ng gi·∫£ v·ªù gi·∫£ v·ªã ·ªü ƒë√¢y v·ªõi t. T nh·∫•t ƒë·ªãnh ph·∫£i l√†m r√µ chuy·ªán n√†y',
            time: '22:41',
            isMe: false
          },
          {
            id: 4,
            sender: 'Me',
            text: 'Qu√¢n, b√¨nh tƒ©nh. C√≥ nh·∫ßm l·∫ßn hay sai s√≥t g√¨ ƒë√¢y th√¥i. T c≈©ng kh√¥ng bi·∫øt chuy·ªán n√†y. T v·ª´a m·ªõi xem.',
            time: '22:42',
            isMe: true
          },
          {
            id: 5,
            sender: 'T∆∞·ªùng Vy',
            text: 'Nh·∫ßm l√†m? M nghƒ© tao ng√¢y th∆° √†? T l√† ng∆∞·ªùi ƒë∆∞a ra √Ω t∆∞·ªüng ch√≠nh, v√†i tr√≤ chuy·ªán n·ªçm quan tr·ªçng c√πng l√† t. Ch·∫•y m·ªü h√¨nh, l√†m to√†n b·ªô s·ªë li·ªáu. C√≤n b·ªçn m g√¨ ƒë√£ ƒë∆∞·ª£c trao ph·∫ßn th∆∞·ªüng th√¨ c√≤n m. Trong khi t m·∫•t t·∫•t c·∫£ c√¥ng s·ª©c, t ƒë√£ ƒë·ªÉ tr·ªÖn khai. B·ªù l√† nh·ªØng g√¨ b·ªçn m g√¢y d·ª±ng l√™n t·ª´ th√†nh c√¥ng t. R√µ r√†ng th∆∞·ªùng t√¥i gi·∫£ b√†o nhi·ªÅu? H√≥c b·ªông 100%, vi·ªác l√†m g√¨ th·∫•m m?',
            time: '22:43',
            isMe: false
          },
          {
            id: 6,
            sender: 'T∆∞·ªùng Vy',
            text: 'Innovation. Tao ƒë√£ th·ª´a trang b√†o ƒëem. M√†y v·ª£n tao n·ªôm n√¢y. H√≥c chung v·ªÅ l·ªùi n√≥i s∆∞·ªõng d√≥ √†? C√°i giai th∆∞·ªüng n√¢y ch·ªâ t m·ªõi x·ª©ng ƒë√°ng. M√†y, v·ªõi t∆∞ c√°ch nhanh tr∆∞·ªüng, kh√¥ng c√≥ tr√°ch nhi·ªám g√¨ sau?',
            time: '22:44',
            isMe: false
          },
          {
            id: 7,
            sender: 'Me',
            text: 'Sao m l·∫°i n√≥i t√¥i v·∫≠y. ƒê√¢y l√† l·∫ßn ƒë·∫ßu c·ªßa h√¥i ƒë·ªìng, T ƒë·∫ßu c√≥ quy·ªÅn. T c≈©ng s·∫Ω chuy·ªán l√† bi·∫øt v·ªÅ nh·ªØng n√†y.',
            time: '22:45',
            isMe: true
          },
          {
            id: 8,
            sender: 'T∆∞·ªùng Vy',
            text: 'Quy·∫øt ƒë·ªãnh c·ªßa ai? M√†y, Quynh Anh v√† th·∫±ng T√πng ch·ª© m? T·∫°i tao kh√¥ng bi·∫øt chuy·ªán? B·ªçn m√¢y ƒë·ªãnh ƒÉn c·∫Øp c√¥ng lao c·ªßa tao trong g√¨ kh√¥ng m√†y th√¨ m c√≥ t·ª´ v√† c√≥ g√¨ v√¥ t√¥i huy t·ª± t·∫ø, qu√° mu·ªôn r·ªìi',
            time: '22:46',
            isMe: false
          },
          {
            id: 9,
            sender: 'Me',
            text: 'K√¥ ph·∫£i th·∫ø! B·ªçn t ko l√†m chuy·ªán ƒë√≥. B·ªçn m√¨nh l√† m·ªôt nh√≥m m√†. Du tao ƒë·∫ª t√™n m trong danh s√°ch nh·ªØng c√¥ng s·ª©c c·ªßa m th√¨ v·∫´n √° ƒë√≥, m l√†m th·∫ø th√¨ c√≥ th·∫•y n√†y m·ªçi ng∆∞·ªùi c√πng nhau quy dung s·∫ª c√¥ ƒë·ªóng ƒë√≥ b√©, m c≈©ng c√≥ nh·ªØng c·ªï chuy·ªÉn ƒëi ƒë·ªÅn bu·ªôc ƒë√¥ ƒë√¢u dung ko?',
            time: '22:47',
            isMe: true
          },
          {
            id: 10,
            sender: 'T∆∞·ªùng Vy',
            text: 'ƒê·ª´ng g·ªçp c√°c tao ko c√≥ t√™n trong danh s√°ch th√¨ con c√≥ √Ω nghƒ©a g√¨? Giai th∆∞·ªüng n√¢y l√† h·ªçc t·∫≠p c·ªßa tao. V√† nh∆∞ v·∫≠y c√≥ t·ªï v·ª©c c·ªßa t, nh·ªØng th·ª© m√† ƒëem c·∫£ ƒë·ªó ng√† t c≈©ng nh∆∞ tr·ª±c.',
            time: '22:48',
            isMe: false
          },
          {
            id: 11,
            sender: 'Me',
            text: 'M c√≥ bi·∫øt gi·∫£i th∆∞·ªüng l·∫ßn n√¢y c√≥ m·∫•y c√°i ƒë∆∞·ª£c ƒë·ªôi t ko, bi·∫øt th√≥ quan tr·ªçng v·ªõi t ƒë·∫øn m·ª©c n√†o kh√¥ng. T ƒë√°ng t·∫°i n·∫øu nh∆∞ t l·∫°i ƒë·ªÉ b·ªçn m√¢y h∆∞·ªüng h·∫øt √†?',
            time: '22:49',
            isMe: true
          },
          {
            id: 12,
            sender: 'T∆∞·ªùng Vy',
            text: 'Qu√¢n, hay binh t√¨nh l·∫°i, ƒë·ª´ng l√†m g√¨ trong l√∫c n√≥ng gi·∫≠n. T s·∫Ω g·ªçi cho th·∫ßy gi√°o, xin th√™m m·ªôt cu·ªôc h·ªçp, t mu·ªën c√≥ c∆° h·ªôi m√¨ c≈©ng g√≥p th√¢y ƒë·ªÉ l√†m r√µ m·ªçi chuy·ªán. ƒê∆∞·ª£c kh√¥ng?',
            time: '22:50',
            isMe: false
          },
          {
            id: 13,
            sender: 'Me',
            text: 'G·∫∑p ƒë·ªÉ l√†m g√¨? B√© c√°c ngu·ªùi t·ª•p ki·ªÉm m·ªçi th·ª©ng v√¨ tao c√≥ thi thu·∫≠t l·∫°i b·∫£o t·ª•p ƒë·ªÉ t c√¥ c∆° h·ªôi th∆∞∆°ng. C√°i j c≈©ng t·∫°i. Tao v√† cu·ªôc thi n√¢y. T s·∫Ω x√°ch tr·∫ßn t·∫•t c·∫£, kh√¥ng c√≥ ch·ªó n√†o cho group. H√†',
            time: '22:51',
            isMe: true
          },
          {
            id: 14,
            sender: 'T∆∞·ªùng Vy',
            text: 'M ƒë√∫ng m·∫°nh ƒë·ªìng. M s·∫Ω ph√° h·ªßy t·∫•t c·∫£, kh√¥ng ch√≠ c·ªßa m√¨nh n√†o cua m n∆∞a. Ch√∫ng ta s·∫Ω b·∫£o c√°o l√©n tr√™n v√† gi·∫£i th√≠ch ƒë∆∞·ª£c m√†, l√†m r√µ c√¥ng ch·ª©c c·ªßa m·ªôt b·∫≠n c√°c ch√∫t ƒë∆∞·ª£c ko, ƒë·ª´ng n·∫±ng v√≤i m√† l√†m l√≠u l√∫c n√¢y.',
            time: '22:52',
            isMe: false
          },
          {
            id: 15,
            sender: 'Me',
            text: 'Ph√° hay? L√≤ng tin c·ªßa tao ƒë√£ b·ªã ph√° h·ªßy b·ªüi nh√≥m m√†i, l√† th·ª© c√≥ th·ªÉ s·ª≠ d·ª•ng g·ªçi b·ªçn c√≥ t·∫ßm nh√¨n c√≥ th·ªÉ √°p d·ª•ng v·ªõi m√† ƒë√≥n nh·∫≠n. T s·∫Ω t·ª± l·∫•y l·∫°i c√¥ng b·∫±ng v√† nh·ªØng th·ª© x·ª©ng ƒë√°ng v·ªÅ t',
            time: '22:53',
            isMe: true
          },
          {
            id: 16,
            sender: 'T∆∞·ªùng Vy',
            text: 'ƒê·ª´ng nh∆∞ th·∫ø m√† Qu√¢n, ch√∫ng ta n√≥i chuy·ªán b√†n h·∫øt ƒëi',
            time: '22:54',
            isMe: false
          },
          {
            id: 17,
            sender: 'T∆∞·ªùng Vy',
            text: '‚òéÔ∏è Cu·ªôc g·ªçi nh·ª°',
            time: '23:16',
            isMe: false,
            type: 'missed_call' as const
          },
          {
            id: 18,
            sender: 'T∆∞·ªùng Vy',
            text: '‚òéÔ∏è Cu·ªôc g·ªçi nh·ª°',
            time: '23:42',
            isMe: false,
            type: 'missed_call' as const
          }
        ]
      };
    } else if (chatId === 'clue-x') {
      return {
        name: 'Clue-X',
        avatar: 'CX',
        messages: [
          {
            id: 1,
            sender: 'Clue-X',
            text: 'Ch√∫c b·∫°n ch∆°i game vui v·∫ª! üéÆ',
            time: '23:42',
            isMe: false
          }
        ]
      };
    }
    return { name: '', avatar: '', messages: [] };
  };

  const chatData = getChatData(chatId);
  const [messages, setMessages] = useState<Message[]>(chatData.messages);
  const [newMessage, setNewMessage] = useState('');
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    // Scroll to bottom when chat is first opened
    scrollToBottom();
  }, [chatId]);

  const sendMessage = (e: React.FormEvent) => {
    e.preventDefault();
    if (newMessage.trim()) {
      const now = new Date();
      const timeStr = now.toLocaleTimeString('en-US', { 
        hour: '2-digit', 
        minute: '2-digit',
        hour12: false 
      });
      
      const message: Message = {
        id: messages.length + 1,
        sender: 'Me',
        text: newMessage.trim(),
        time: timeStr,
        isMe: true
      };
      
      setMessages([...messages, message]);
      setNewMessage('');
    }
  };

  return (
    <div className="chat-view">
      <div className="chat-header">
        <button className="back-button" onClick={onBack}>
          <span>‚Üê</span>
        </button>
        <div className="chat-info">
          <div className="contact-details">
            <h3>{chatData.name}</h3>
          </div>
        </div>
        <div className="header-actions">
          <button className="action-button" onClick={handleCallClick}>üìû</button>
        </div>
      </div>

      <div className="messages-container">
        {messages.map((message) => (
          <div
            key={message.id}
            className={`message ${message.isMe ? 'message-sent' : 'message-received'} ${message.type ? `message-${message.type}` : ''}`}
          >
            <div 
              className={`message-bubble ${message.type ? `${message.type}-bubble` : ''}`}
              data-sender={message.sender}
              data-chat-id={chatId}
            >
              {message.type === 'missed_call' && (
                <div className="call-message">
                  <div className="call-info">
                    <span className="call-icon">‚òéÔ∏è</span>
                    <span className="call-text">Cu·ªôc g·ªçi nh·ª°</span>
                  </div>
                  <button className="call-back-button" onClick={handleCallClick}>
                    <span className="call-back-text">G·ªçi l·∫°i</span>
                  </button>
                </div>
              )}
              {!message.type && (
                <p className="message-text">{message.text}</p>
              )}
              <span className="message-time">{message.time}</span>
            </div>
          </div>
        ))}
        <div ref={messagesEndRef} />
      </div>

      <form className="message-input-container" onSubmit={sendMessage}>
        <div className="input-wrapper">
          <button type="button" className="attachment-button">üìé</button>
          <input
            type="text"
            value={newMessage}
            onChange={(e) => setNewMessage(e.target.value)}
            placeholder="Type a message..."
            className="message-input"
          />
          <button type="submit" className="send-button" disabled={!newMessage.trim()}>
            ‚û§
          </button>
        </div>
      </form>

      {callState !== 'none' && (
        <div className="call-screen">
          <div className="call-interface">
            <div className="caller-info">
              <div className={`caller-avatar ${chatId === 'clue-x' ? 'clue-x-avatar' : 'tuong-vy-avatar'}`}>
                {chatData.avatar}
              </div>
              <h2 className="caller-name">{chatData.name}</h2>
              <div className="call-status">
                {callState === 'calling' && (
                  <>
                    <div className="calling-animation">
                      <div className="pulse-ring"></div>
                      <div className="pulse-ring pulse-ring-delay-1"></div>
                      <div className="pulse-ring pulse-ring-delay-2"></div>
                    </div>
                    <p>ƒêang g·ªçi...</p>
                  </>
                )}
                {callState === 'busy' && (
                  <p className="busy-message">Ng∆∞·ªùi d√πng ƒëang b·∫≠n</p>
                )}
              </div>
            </div>
            <div className="call-actions">
              <button 
                className="end-call-button" 
                onClick={() => setCallState('none')}
              >
                üìû
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ChatView;
